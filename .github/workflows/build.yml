name: "Main / Pull requests build"
on:
    pull_request:
        paths-ignore:
            - '.txt'
            - 'LICENSE'
            - 'docs/**'
        branches: [ main ]
    push:
        branches:
            - main

jobs:
    pre-commit:
        if: ${{ !always() }}
        name: Pre-commit check
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
        steps:
            -   name: Checkout git repository
                uses: actions/checkout@v4.1.6
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Pre-commit checks
                uses: pre-commit/action@v3.0.1
                with:
                    extra_args: --all-files
            -   name: pre-commit-c-lite
                uses: pre-commit-ci/lite-action@v1.1.0
                if: always()

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: [pre-commit]
        strategy:
            fail-fast: true
        steps:
            -   uses: actions/checkout@v4.1.6
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Compile project
                run: mvn --no-transfer-progress clean compile
    depcheck:
        name: OWASP Dependency Check
        runs-on: ubuntu-latest
        needs: [build]
        strategy:
            fail-fast: true
        steps:
            -   name: Checkout git repository
                uses: actions/checkout@v4.1.6
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Run OWASP Dependency Check
                run: mvn org.owasp:dependency-check-maven:check -DnvdApiKey=${{ secrets.NVD_API_KEY }} -DfailBuildOnCVSS=${{ vars.FAIL_BUILD_ON_CVSS }}
            -   name: Upload Dependency Check report
                uses: actions/upload-artifact@master
                with:
                    name: Dependency Check HTML report
                    path: ${{github.workspace}}/target/dependency-check-report.html
            -   name: Install dependencies
                run: mvn install -DskipTests=true

    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest
        needs: [depcheck]
        strategy:
            fail-fast: true
        steps:
            -   name: Checkout git repository
                uses: actions/checkout@v4.1.6
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Run Unit Test
                run: mvn test
            -   name: Upload Surefire reports
                uses: actions/upload-artifact@master
                with:
                    name: Surefire reports
                    path: ${{github.workspace}}/target/surefire-reports

    integration-tests:
        name: Integraion Tests
        runs-on: ubuntu-latest
        needs: [depcheck]
        strategy:
            fail-fast: true
            max-parallel: 1
        steps:
            -   name: Checkout git repository
                uses: actions/checkout@v4.1.6
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Run Integration Test
                run: mvn verify
            -   name: Upload Failsafe reports
                uses: actions/upload-artifact@master
                with:
                    name: Failsafe reports
                    path: ${{github.workspace}}/target/failsafe-reports

    sonarqube:
        name: SonarQube
        runs-on: ubuntu-latest
        needs: [unit-tests, integration-tests]
        strategy:
            fail-fast: true
            max-parallel: 1
        steps:
            -   uses: actions/checkout@v4.1.6
                with:
                    fetch-depth: 0
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Run SonarQube Analysis
                run: |
                    mvn clean compile org.sonarsource.scanner.maven:sonar-maven-plugin:5.1.0.4751:sonar \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
                        -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
                        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
                        -Dsonar.java.jdkHome=$JAVA_HOME
    docker:
        name: Build and Run Docker image
        runs-on: ubuntu-latest
        #needs: [sonarqube]
        strategy:
            fail-fast: true
            max-parallel: 1
        steps:
            -   uses: actions/checkout@v4.1.6
                with:
                    fetch-depth: 0
            -   name: Set up JDK 23
                uses: actions/setup-java@v4.7.1
                with:
                    distribution: 'temurin'
                    java-version: 23
                    architecture: x64
                    cache: 'maven'
            -   name: Compile project
                run: mvn --no-transfer-progress clean install -DskipTests=true
            -   name: Build Docker image
                run: |
                    docker build -f Dockerfile . -t webgoat:${{ github.sha }}
            # -   name: Scan Docker image
            #     run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image webgoat:v1 --scanners vuln
            # The first call to the action will invoke setup-trivy and install trivy
            -   name: Run Trivy vulnerability scanner
                uses: aquasecurity/trivy-action@0.28.0
                with:
                    image-ref: 'webgoat:${{ github.sha }}'
                    format: 'table'
                    exit-code: '1'
                    ignore-unfixed: true
                    vuln-type: 'os,library'
                    severity: ${{ vars.FAIL_TRIVY_ON_SEVERITY }}
                    scanners: "vuln"
            -   name: Generate Trivy Vulnerability Report
                uses: aquasecurity/trivy-action@master
                with:
                    scan-type: "fs"
                    output: trivy-report.json
                    format: json
                    scan-ref: .
                    exit-code: 0
                if: ${{ always() }}
            -   name: Upload Vulnerability Scan Results
                uses: actions/upload-artifact@v4
                with:
                    name: trivy-report
                    path: trivy-report.json
                    retention-days: 30
                if: ${{ always() }}
