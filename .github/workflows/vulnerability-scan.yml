name: "Vulnerability Scanning Pipeline"

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

env:
  CVSS_THRESHOLD: 4.0  # Medium and above (4.0-6.9 Medium, 7.0-8.9 High, 9.0-10.0 Critical)

jobs:
  vulnerability-scan:
    name: "Scan Dependencies for Vulnerabilities"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 23
          architecture: x64
          cache: 'maven'

      - name: Run OWASP Dependency Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          # Run dependency check with JSON output
          mvn --no-transfer-progress org.owasp:dependency-check-maven:check \
            -Dformat=JSON \
            -DfailBuildOnCVSS=0 \
            -Dnvd.api.key=$NVD_API_KEY \
            -DsuppressionFiles=config/dependency-check/project-suppression.xml
        continue-on-error: true

      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: target/dependency-check-report.json
          retention-days: 30

      - name: Parse vulnerability results
        id: parse-vulns
        if: always()
        run: |
          if [ ! -f "target/dependency-check-report.json" ]; then
            echo "No vulnerability report found"
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Parse JSON report and extract vulnerabilities with CVSS >= 4.0
          python3 << 'EOF'
          import json
          import os
          import sys
          from datetime import datetime
          
          try:
              with open('target/dependency-check-report.json', 'r') as f:
                  report = json.load(f)
          except FileNotFoundError:
              print("No vulnerability report found")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write("has_vulnerabilities=false\n")
              sys.exit(0)
          
          vulnerabilities = []
          total_vulns = 0
          critical_count = 0
          high_count = 0
          medium_count = 0
          
          dependencies = report.get('dependencies', [])
          
          for dep in dependencies:
              vulnerabilities_list = dep.get('vulnerabilities', [])
              for vuln in vulnerabilities_list:
                  cvss_score = 0
                  cvss_info = ""
                  
                  # Get CVSS score from various possible locations
                  if 'cvssv3' in vuln and vuln['cvssv3']:
                      cvss_score = float(vuln['cvssv3'].get('baseScore', 0))
                      cvss_info = f"CVSSv3: {cvss_score}"
                  elif 'cvssv2' in vuln and vuln['cvssv2']:
                      cvss_score = float(vuln['cvssv2'].get('score', 0))
                      cvss_info = f"CVSSv2: {cvss_score}"
                  
                  if cvss_score >= 4.0:  # Medium and above
                      total_vulns += 1
                      
                      if cvss_score >= 9.0:
                          severity = "Critical"
                          critical_count += 1
                      elif cvss_score >= 7.0:
                          severity = "High"
                          high_count += 1
                      else:
                          severity = "Medium"
                          medium_count += 1
                      
                      vulnerabilities.append({
                          'name': vuln.get('name', 'Unknown'),
                          'severity': severity,
                          'cvss_score': cvss_score,
                          'cvss_info': cvss_info,
                          'description': vuln.get('description', 'No description available'),
                          'dependency': dep.get('fileName', 'Unknown dependency'),
                          'cwe': vuln.get('cwe', 'Unknown CWE')
                      })
          
          # Write results to GitHub outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"has_vulnerabilities={'true' if total_vulns > 0 else 'false'}\n")
              f.write(f"total_vulnerabilities={total_vulns}\n")
              f.write(f"critical_count={critical_count}\n")
              f.write(f"high_count={high_count}\n")
              f.write(f"medium_count={medium_count}\n")
          
          # Create vulnerability summary for comments/issues
          if total_vulns > 0:
              summary = f"## 🚨 Security Vulnerabilities Detected\n\n"
              summary += f"**Total Vulnerabilities:** {total_vulns}\n"
              summary += f"- 🔴 Critical: {critical_count}\n"
              summary += f"- 🟠 High: {high_count}\n"
              summary += f"- 🟡 Medium: {medium_count}\n\n"
              
              summary += "### Vulnerability Details\n\n"
              
              for vuln in vulnerabilities[:10]:  # Limit to first 10 for readability
                  severity_icon = "🔴" if vuln['severity'] == "Critical" else "🟠" if vuln['severity'] == "High" else "🟡"
                  summary += f"#### {severity_icon} {vuln['name']} ({vuln['severity']})\n"
                  summary += f"- **Dependency:** `{vuln['dependency']}`\n"
                  summary += f"- **CVSS Score:** {vuln['cvss_info']}\n"
                  summary += f"- **CWE:** {vuln['cwe']}\n"
                  summary += f"- **Description:** {vuln['description'][:200]}{'...' if len(vuln['description']) > 200 else ''}\n\n"
              
              if len(vulnerabilities) > 10:
                  summary += f"*... and {len(vulnerabilities) - 10} more vulnerabilities. Check the full report for details.*\n\n"
              
              summary += "### Recommendations\n\n"
              summary += "1. Review and update affected dependencies to their latest secure versions\n"
              summary += "2. If updates are not available, consider alternative dependencies\n"
              summary += "3. Implement additional security measures to mitigate risks\n"
              summary += "4. Add suppression rules for false positives if necessary\n\n"
              summary += f"📊 **Full Report:** Check the 'dependency-check-report' artifact for complete details\n"
              summary += f"⏰ **Scan Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}"
              
              # Write summary to file for later use
              with open('vulnerability-summary.md', 'w') as f:
                  f.write(summary)
          
          print(f"Found {total_vulns} vulnerabilities (Critical: {critical_count}, High: {high_count}, Medium: {medium_count})")
          EOF

      - name: Comment on Pull Request
        if: steps.parse-vulns.outputs.has_vulnerabilities == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('vulnerability-summary.md')) {
              console.log('No vulnerability summary found');
              return;
            }
            
            const summary = fs.readFileSync('vulnerability-summary.md', 'utf8');
            const prNumber = context.issue.number;
            
            // Check if we already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚨 Security Vulnerabilities Detected')
            );
            
            const commentBody = `${summary}\n\n---\n*This comment was automatically generated by the vulnerability scanning pipeline.*\n\n**Need help?** Contact AppSec for assistance with vulnerability remediation.`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
              console.log('Updated existing vulnerability comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('Created new vulnerability comment');
            }

      - name: Create Security Issue
        if: steps.parse-vulns.outputs.has_vulnerabilities == 'true' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('vulnerability-summary.md')) {
              console.log('No vulnerability summary found');
              return;
            }
            
            const summary = fs.readFileSync('vulnerability-summary.md', 'utf8');
            const totalVulns = '${{ steps.parse-vulns.outputs.total_vulnerabilities }}';
            const criticalCount = '${{ steps.parse-vulns.outputs.critical_count }}';
            const highCount = '${{ steps.parse-vulns.outputs.high_count }}';
            const mediumCount = '${{ steps.parse-vulns.outputs.medium_count }}';
            
            const title = `🚨 Security Alert: ${totalVulns} Vulnerabilities Detected in Main Branch`;
            
            const issueBody = `${summary}\n\n` +
              `### Action Required\n\n` +
              `This issue was automatically created because vulnerabilities were detected when merging to the main branch.\n\n` +
              `**Priority Level:**\n` +
              `${criticalCount > 0 ? '🔴 **CRITICAL** - Immediate action required\n' : ''}` +
              `${highCount > 0 ? '🟠 **HIGH** - Action required within 24-48 hours\n' : ''}` +
              `${mediumCount > 0 ? '🟡 **MEDIUM** - Action required within 1 week\n' : ''}\n` +
              `### Next Steps\n\n` +
              `1. [ ] Assign this issue to the security team\n` +
              `2. [ ] Review each vulnerability and assess impact\n` +
              `3. [ ] Update dependencies or implement mitigations\n` +
              `4. [ ] Test fixes and verify vulnerabilities are resolved\n` +
              `5. [ ] Close this issue when all vulnerabilities are addressed\n\n` +
              `---\n` +
              `**Commit:** ${context.sha}\n` +
              `**Workflow:** ${context.workflow}\n` +
              `**Run:** [${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n` +
              `*This issue was automatically generated by the vulnerability scanning pipeline.*`;
            
            // Check if there's already an open issue for vulnerabilities
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,vulnerability-scan',
              sort: 'created',
              direction: 'desc'
            });
            
            const recentSecurityIssue = existingIssues.data.find(issue => 
              issue.title.includes('Security Alert') && 
              issue.title.includes('Vulnerabilities Detected')
            );
            
            if (recentSecurityIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: recentSecurityIssue.number,
                title: title,
                body: issueBody
              });
              console.log(`Updated existing security issue #${recentSecurityIssue.number}`);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issueBody,
                labels: ['security', 'vulnerability-scan', 'needs-triage'].concat(
                  criticalCount > 0 ? ['critical'] : [],
                  highCount > 0 ? ['high-priority'] : []
                )
              });
              console.log(`Created new security issue #${issue.data.number}`);
            }

      - name: Set job status
        if: always()
        run: |
          if [ "${{ steps.parse-vulns.outputs.has_vulnerabilities }}" == "true" ]; then
            echo "❌ Vulnerabilities detected - Check the report and take action"
            exit 1
          else
            echo "✅ No vulnerabilities detected"
            exit 0
          fi 